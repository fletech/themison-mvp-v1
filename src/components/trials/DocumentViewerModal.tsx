import React, { useState } from "react";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import {
  Download,
  Printer,
  Share2,
  ZoomIn,
  ZoomOut,
  RotateCw,
  X,
  FileText,
  Calendar,
  User,
  CheckCircle,
  Clock,
  AlertCircle,
} from "lucide-react";
import ReactMarkdown from "react-markdown";

interface DocumentViewerModalProps {
  isOpen: boolean;
  onClose: () => void;
  document: any;
  onStatusChange?: (newStatus: string) => void;
}

export function DocumentViewerModal({
  isOpen,
  onClose,
  document,
  onStatusChange,
}: DocumentViewerModalProps) {
  const [zoom, setZoom] = useState(100);
  const [rotation, setRotation] = useState(0);

  if (!document) return null;

  const handlePrint = () => {
    const printWindow = window.open("", "_blank");
    if (printWindow) {
      printWindow.document.write(`
        <!DOCTYPE html>
        <html>
        <head>
          <title>${document.title}</title>
          <style>
            body { font-family: Arial, sans-serif; margin: 40px; line-height: 1.6; }
            .header { text-align: center; margin-bottom: 30px; border-bottom: 2px solid #333; padding-bottom: 20px; }
            .header h1 { margin: 0; font-size: 24px; }
            .header .info { font-size: 14px; color: #666; margin-top: 10px; }
            .content { white-space: pre-wrap; }
            .checklist-item { margin: 10px 0; }
            .checkbox { display: inline-block; width: 15px; height: 15px; border: 2px solid #333; margin-right: 10px; }
            @media print { 
              body { margin: 20px; } 
              .no-print { display: none; }
            }
          </style>
        </head>
        <body>
          <div class="header">
            <h1>${document.title}</h1>
            <div class="info">
              Assigned: ${new Date(document.assignedAt).toLocaleDateString()} | 
              Status: ${document.status} | 
              Type: ${document.type}
            </div>
            ${document.notes ? `<div class="info">Notes: ${document.notes}</div>` : ''}
          </div>
          <div class="content">${document.content.replace(/\n/g, '<br>')}</div>
        </body>
        </html>
      `);
      printWindow.document.close();
      printWindow.print();
    }
  };

  const handleDownload = () => {
    const content = `${document.title}\n\nAssigned: ${new Date(document.assignedAt).toLocaleDateString()}\nStatus: ${document.status}\n${document.notes ? `Notes: ${document.notes}` : ''}\n\n${document.content}`;
    
    const blob = new Blob([content], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.download = `${document.title.replace(/[^a-z0-9]/gi, '_').toLowerCase()}.txt`;
    link.click();
    URL.revokeObjectURL(url);
  };

  const handleExport = () => {
    const htmlContent = `
      <!DOCTYPE html>
      <html>
      <head>
        <meta charset="UTF-8">
        <title>${document.title}</title>
        <style>
          body { font-family: Arial, sans-serif; margin: 40px; line-height: 1.6; color: #333; }
          .header { background: #f8f9fa; padding: 20px; margin-bottom: 30px; border: 2px solid #e9ecef; }
          .header h1 { margin: 0; color: #2c3e50; }
          .header .info { margin-top: 10px; font-size: 14px; color: #666; }
          .content { white-space: pre-wrap; }
          .status-badge { 
            display: inline-block; 
            padding: 4px 8px; 
            border-radius: 4px; 
            font-size: 12px; 
            font-weight: bold;
            ${document.status === 'completed' ? 'background: #d4edda; color: #155724;' : 
              document.status === 'in_progress' ? 'background: #fff3cd; color: #856404;' : 
              'background: #f8d7da; color: #721c24;'}
          }
        </style>
      </head>
      <body>
        <div class="header">
          <h1>${document.title}</h1>
          <div class="info">
            <strong>Assigned:</strong> ${new Date(document.assignedAt).toLocaleDateString()} | 
            <strong>Status:</strong> <span class="status-badge">${document.status.toUpperCase()}</span> | 
            <strong>Type:</strong> ${document.type}
          </div>
          ${document.notes ? `<div class="info"><strong>Notes:</strong> ${document.notes}</div>` : ''}
        </div>
        <div class="content">${document.content.replace(/\n/g, '<br>')}</div>
        <div style="margin-top: 40px; text-align: center; font-size: 12px; color: #666; border-top: 1px solid #ddd; padding-top: 20px;">
          Generated by Themison Clinical Trial Management System | ${new Date().toLocaleString()}
        </div>
      </body>
      </html>
    `;
    
    const blob = new Blob([htmlContent], { type: 'text/html' });
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.download = `${document.title.replace(/[^a-z0-9]/gi, '_').toLowerCase()}.html`;
    link.click();
    URL.revokeObjectURL(url);
  };

  const handleStatusChange = (newStatus: string) => {
    if (onStatusChange) {
      onStatusChange(newStatus);
    }
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'completed': return 'bg-green-100 text-green-800';
      case 'in_progress': return 'bg-yellow-100 text-yellow-800';
      case 'assigned': return 'bg-blue-100 text-blue-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  const getStatusIcon = (status: string) => {
    switch (status) {
      case 'completed': return CheckCircle;
      case 'in_progress': return Clock;
      case 'assigned': return AlertCircle;
      default: return FileText;
    }
  };

  const StatusIcon = getStatusIcon(document.status);

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="max-w-5xl max-h-[90vh] p-0 overflow-hidden">
        {/* Header */}
        <DialogHeader className="p-6 border-b bg-gray-50">
          <div className="flex items-start justify-between">
            <div className="flex items-start gap-4">
              <div className="w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center">
                <FileText className="w-6 h-6 text-blue-600" />
              </div>
              <div>
                <DialogTitle className="text-xl font-semibold mb-2">
                  {document.title}
                </DialogTitle>
                <div className="flex items-center gap-4 text-sm text-gray-600">
                  <div className="flex items-center gap-1">
                    <Calendar className="w-4 h-4" />
                    Assigned: {new Date(document.assignedAt).toLocaleDateString()}
                  </div>
                  <div className="flex items-center gap-1">
                    <StatusIcon className="w-4 h-4" />
                    <Badge className={`${getStatusColor(document.status)} text-xs`}>
                      {document.status.replace('_', ' ').toUpperCase()}
                    </Badge>
                  </div>
                  <div className="flex items-center gap-1">
                    <User className="w-4 h-4" />
                    Type: {document.type?.replace('_', ' ')}
                  </div>
                </div>
                {document.notes && (
                  <p className="text-sm text-gray-600 mt-2 italic">
                    "{document.notes}"
                  </p>
                )}
              </div>
            </div>
            <Button variant="ghost" size="sm" onClick={onClose}>
              <X className="w-4 h-4" />
            </Button>
          </div>
        </DialogHeader>

        {/* Toolbar */}
        <div className="p-4 border-b bg-white flex items-center justify-between">
          <div className="flex items-center gap-2">
            <Button variant="outline" size="sm" onClick={() => setZoom(Math.max(50, zoom - 25))}>
              <ZoomOut className="w-4 h-4 mr-1" />
              Zoom Out
            </Button>
            <span className="text-sm text-gray-600 px-2">{zoom}%</span>
            <Button variant="outline" size="sm" onClick={() => setZoom(Math.min(200, zoom + 25))}>
              <ZoomIn className="w-4 h-4 mr-1" />
              Zoom In
            </Button>
            <Button variant="outline" size="sm" onClick={() => setRotation((rotation + 90) % 360)}>
              <RotateCw className="w-4 h-4 mr-1" />
              Rotate
            </Button>
          </div>
          
          <div className="flex items-center gap-2">
            {/* Status Change Buttons */}
            {document.status === 'assigned' && (
              <Button 
                variant="outline" 
                size="sm" 
                onClick={() => handleStatusChange('in_progress')}
                className="text-yellow-700 border-yellow-300 hover:bg-yellow-50"
              >
                <Clock className="w-4 h-4 mr-1" />
                Start Progress
              </Button>
            )}
            {document.status === 'in_progress' && (
              <Button 
                variant="outline" 
                size="sm" 
                onClick={() => handleStatusChange('completed')}
                className="text-green-700 border-green-300 hover:bg-green-50"
              >
                <CheckCircle className="w-4 h-4 mr-1" />
                Mark Complete
              </Button>
            )}
            
            {/* Action Buttons */}
            <Button variant="outline" size="sm" onClick={handlePrint}>
              <Printer className="w-4 h-4 mr-1" />
              Print
            </Button>
            <Button variant="outline" size="sm" onClick={handleDownload}>
              <Download className="w-4 h-4 mr-1" />
              Download
            </Button>
            <Button variant="outline" size="sm" onClick={handleExport}>
              <Share2 className="w-4 h-4 mr-1" />
              Export HTML
            </Button>
          </div>
        </div>

        {/* Document Content */}
        <div className="flex-1 overflow-auto p-6 bg-gray-50">
          <div 
            className="bg-white shadow-lg mx-auto p-8 min-h-full"
            style={{ 
              transform: `scale(${zoom / 100}) rotate(${rotation}deg)`,
              transformOrigin: 'top center',
              maxWidth: '800px',
              transition: 'transform 0.2s ease'
            }}
          >
            <div className="prose prose-sm max-w-none">
              <ReactMarkdown
                components={{
                  // Custom rendering for checklists
                  p: ({ children }) => {
                    const text = children?.toString() || '';
                    if (text.includes('[ ]') || text.includes('[x]')) {
                      return (
                        <div className="flex items-start gap-2 mb-2">
                          <div className="w-4 h-4 border-2 border-gray-400 mt-1 flex-shrink-0"></div>
                          <span>{text.replace(/\[[ x]\]\s*/, '')}</span>
                        </div>
                      );
                    }
                    return <p className="mb-3">{children}</p>;
                  },
                  h1: ({ children }) => <h1 className="text-2xl font-bold mb-4 text-gray-900">{children}</h1>,
                  h2: ({ children }) => <h2 className="text-xl font-semibold mb-3 text-gray-800 border-b border-gray-200 pb-2">{children}</h2>,
                  h3: ({ children }) => <h3 className="text-lg font-medium mb-2 text-gray-700">{children}</h3>,
                  ul: ({ children }) => <ul className="list-disc pl-6 mb-4 space-y-1">{children}</ul>,
                  ol: ({ children }) => <ol className="list-decimal pl-6 mb-4 space-y-1">{children}</ol>,
                  li: ({ children }) => <li className="text-gray-700">{children}</li>,
                  strong: ({ children }) => <strong className="font-semibold text-gray-900">{children}</strong>,
                  em: ({ children }) => <em className="italic text-gray-600">{children}</em>,
                }}
              >
                {document.content}
              </ReactMarkdown>
            </div>
          </div>
        </div>
      </DialogContent>
    </Dialog>
  );
}